# generate_country_codes.py (fixed: no direct import of phonemetadata_pb2)
import os
import json
import phonenumbers
from phonenumbers.phonenumberutil import (
    country_code_for_region,
    SUPPORTED_REGIONS,
)
import pycountry

MODE = "recommended"
POPULAR_TERRITORIES = {
    "HK","MO","TW","PR","GU","MP","VI","AS",
    "GG","JE","IM","XK","RE","YT","MQ","GF","PF","NC","GP",
    "BM","KY","AI","MS","VG","GI"
}
OUTPUT_PATH = os.path.join("main", "country_codes.py")

def flag_emoji(region):
    if len(region) != 2 or not region.isalpha():
        return "🏁"
    base = 0x1F1E6
    return chr(base + (ord(region[0].upper()) - 65)) + chr(base + (ord(region[1].upper()) - 65))

def name_for_region(region):
    special = {"XK": "Kosovo"}
    if region in special:
        return special[region]
    c = pycountry.countries.get(alpha_2=region)
    return c.name if c else region

def possible_lengths_for_region(region):
    md = phonenumbers.PhoneMetadata.metadata_for_region(region, None)
    if not md:
        return None
    lengths = set(md.general_desc.possible_length)
    if not lengths:
        lengths.update(md.fixed_line.possible_length)
        lengths.update(md.mobile.possible_length)
    lengths = {n for n in lengths if isinstance(n, int) and n > 0}
    return sorted(lengths) if lengths else None

def regions_recommended():
    members = {c.alpha_2 for c in pycountry.countries}
    baseline = members.intersection(SUPPORTED_REGIONS)
    return sorted(baseline.union(POPULAR_TERRITORIES).intersection(SUPPORTED_REGIONS))

def regions_all():
    return sorted(SUPPORTED_REGIONS)

def build_rows(regions):
    rows = []
    for reg in regions:
        cc = country_code_for_region(reg)
        if not cc:
            continue
        lens = possible_lengths_for_region(reg)
        if not lens:
            continue
        dial = f"+{cc}"
        min_len, max_len = min(lens), max(lens)
        nm = name_for_region(reg)
        flag = flag_emoji(reg)
        display = f"{flag} {nm} ({dial})"
        rows.append((dial, display, min_len, max_len))
    rows.sort(key=lambda r: r[1])
    return rows


def write_file(rows, path):
    import os
    os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, "w", encoding="utf-8") as f:
        f.write("# -*- coding: utf-8 -*-\n")
        f.write("# Auto-generated by generate_country_codes.py — do not edit by hand\n")
        f.write("COUNTRY_CODES = [\n")
        for dial, display, lo, hi in rows:
            # keep emojis readable and still escape quotes properly
            f.write(f"    ({json.dumps(dial, ensure_ascii=False)}, "
                    f"{json.dumps(display, ensure_ascii=False)}, {lo}, {hi}),\n")
        f.write("]\n")
    print(f"✅ Wrote {path} with {len(rows)} entries.")



def main():
    regions = regions_recommended() if MODE == "recommended" else regions_all()
    rows = build_rows(regions)
    write_file(rows, OUTPUT_PATH)

if __name__ == "__main__":
    main()
