# Generated by Django 4.2.23 on 2025-08-27 10:19

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import main.models


class Migration(migrations.Migration):

    dependencies = [
        ("main", "0006_usertaskprogress_usertask_forcedtaskdirective"),
    ]

    operations = [
        migrations.CreateModel(
            name="UserTaskTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("hotel_name", models.CharField(max_length=160)),
                ("slug", models.SlugField(max_length=180, unique=True)),
                ("country", models.CharField(max_length=64)),
                ("city", models.CharField(max_length=64)),
                ("cover_image_url", models.URLField(blank=True, default="")),
                (
                    "cover_image",
                    models.ImageField(blank=True, null=True, upload_to="tasks/covers/"),
                ),
                (
                    "task_id",
                    models.CharField(
                        default=main.models._gen_task_id,
                        editable=False,
                        max_length=24,
                        unique=True,
                    ),
                ),
                ("task_date", models.DateField(blank=True, null=True)),
                (
                    "task_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="If empty, falls back to tasksettngs.task_price.",
                        max_digits=12,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "task_commission",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="If empty, falls back to tasksettngs.task_commission.",
                        max_digits=12,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "task_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="0.00 – 5.00",
                        max_digits=3,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("5.00")),
                        ],
                    ),
                ),
                (
                    "task_label",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("PERFECT", "Perfect"),
                            ("GOOD", "Good"),
                            ("MEDIUM", "Medium"),
                        ],
                        default="",
                        max_length=12,
                    ),
                ),
                (
                    "is_admin_task",
                    models.BooleanField(
                        default=False,
                        help_text="If True, user must have wallet ≥ price to complete this task.",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("ACTIVE", "Active"),
                            ("PAUSED", "Paused"),
                            ("ARCHIVED", "Archived"),
                        ],
                        default="DRAFT",
                        help_text="Set to ACTIVE to include in random selection.",
                        max_length=10,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_task_templates",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-updated_at", "-created_at"],
            },
        ),
        migrations.DeleteModel(
            name="UserTaskProgress",
        ),
        migrations.AlterField(
            model_name="forcedtaskdirective",
            name="template",
            field=models.ForeignKey(
                blank=True,
                help_text="Optional fixed template to serve for this order.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="main.usertasktemplate",
            ),
        ),
        migrations.AlterField(
            model_name="usertask",
            name="template",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="instances",
                to="main.usertasktemplate",
            ),
        ),
        migrations.AddIndex(
            model_name="usertasktemplate",
            index=models.Index(fields=["status"], name="main_userta_status_ab9887_idx"),
        ),
        migrations.AddIndex(
            model_name="usertasktemplate",
            index=models.Index(
                fields=["country", "city"], name="main_userta_country_443a7d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="usertasktemplate",
            index=models.Index(
                fields=["task_date"], name="main_userta_task_da_274738_idx"
            ),
        ),
    ]
