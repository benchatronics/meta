# Generated by Django 4.2.23 on 2025-08-16 08:35

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import main.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(max_length=20, unique=True)),
                ('invitation_code', models.CharField(blank=True, max_length=50, null=True)),
                ('signup_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('signup_country', models.CharField(blank=True, max_length=100, null=True)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('last_login_country', models.CharField(blank=True, max_length=100, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', main.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, unique=True)),
                ('iso', models.CharField(db_index=True, max_length=2, unique=True)),
                ('flag', models.CharField(blank=True, help_text='Emoji flag (e.g., ðŸ‡©ðŸ‡ª)', max_length=8)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DepositAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('network', models.CharField(choices=[('ETH', 'Ethereum (ERC20)'), ('TRC20', 'USDT (TRC20)')], max_length=10, unique=True)),
                ('address', models.CharField(max_length=128)),
                ('active', models.BooleanField(default=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PayoutAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(blank=True, max_length=64)),
                ('address_type', models.CharField(choices=[('ETH', 'Ethereum (ERC-20)'), ('TRC20', 'USDT (TRC-20)')], max_length=10)),
                ('address', models.CharField(max_length=128)),
                ('is_verified', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payout_addresses', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WithdrawalRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount_cents', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('currency', models.CharField(choices=[('EUR', 'Euro (â‚¬)'), ('USD', 'US Dollar ($)'), ('GBP', 'Pound (Â£)')], default='EUR', max_length=3)),
                ('fee_cents', models.PositiveIntegerField(default=0)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('confirmed_at', models.DateTimeField(blank=True, null=True)),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='main.payoutaddress')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='withdrawals', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Wallet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('balance_cents', models.BigIntegerField(default=0)),
                ('pending_cents', models.BigIntegerField(default=0)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='wallet', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Hotel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=140)),
                ('slug', models.SlugField(blank=True, max_length=160, unique=True)),
                ('city', models.CharField(blank=True, max_length=80)),
                ('description_short', models.CharField(max_length=200, verbose_name='Text under it')),
                ('cover_image', models.ImageField(blank=True, null=True, upload_to='hotels/covers/')),
                ('cover_image_url', models.URLField(blank=True)),
                ('available_date', models.DateField(blank=True, null=True)),
                ('score', models.DecimalField(decimal_places=1, help_text='0.0 â€“ 5.0 (one decimal)', max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('label', models.CharField(choices=[('perfect', 'Perfect'), ('good', 'Good'), ('medium', 'Medium')], default='good', help_text='Chip on card (color-coded)', max_length=10)),
                ('is_recommended', models.BooleanField(default=False)),
                ('popularity', models.PositiveIntegerField(default=0)),
                ('is_published', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='hotels', to='main.country')),
                ('favorites', models.ManyToManyField(blank=True, related_name='favorite_hotels', through='main.Favorite', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at', '-score', 'name'],
            },
        ),
        migrations.AddField(
            model_name='favorite',
            name='hotel',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.hotel'),
        ),
        migrations.AddField(
            model_name='favorite',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='DepositRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount_cents', models.PositiveIntegerField()),
                ('txid', models.CharField(blank=True, max_length=128, null=True)),
                ('confirmed_at', models.DateTimeField(blank=True, null=True)),
                ('currency', models.CharField(choices=[('EUR', 'Euro (â‚¬)'), ('USD', 'US Dollar ($)'), ('GBP', 'Pound (Â£)')], default='EUR', max_length=3)),
                ('network', models.CharField(choices=[('ETH', 'Ethereum (ERC20)'), ('TRC20', 'USDT (TRC20)')], max_length=10)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('awaiting_payment', 'Awaiting Payment'), ('awaiting_review', 'Awaiting Review'), ('confirmed', 'Confirmed'), ('failed', 'Failed')], default='awaiting_payment', max_length=20)),
                ('reference', models.CharField(db_index=True, max_length=20, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('pay_to', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='main.depositaddress')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deposits', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='payoutaddress',
            index=models.Index(fields=['user', 'address_type'], name='main_payout_user_id_b92e6d_idx'),
        ),
        migrations.AddConstraint(
            model_name='payoutaddress',
            constraint=models.UniqueConstraint(fields=('user', 'address_type'), name='uniq_user_network_address'),
        ),
        migrations.AddIndex(
            model_name='hotel',
            index=models.Index(fields=['-created_at'], name='main_hotel_created_71749b_idx'),
        ),
        migrations.AddIndex(
            model_name='hotel',
            index=models.Index(fields=['-score'], name='main_hotel_score_022c1c_idx'),
        ),
        migrations.AddIndex(
            model_name='hotel',
            index=models.Index(fields=['-popularity'], name='main_hotel_popular_67efea_idx'),
        ),
        migrations.AddIndex(
            model_name='hotel',
            index=models.Index(fields=['is_recommended'], name='main_hotel_is_reco_f9f75b_idx'),
        ),
        migrations.AddIndex(
            model_name='hotel',
            index=models.Index(fields=['is_published'], name='main_hotel_is_publ_8966c0_idx'),
        ),
        migrations.AddIndex(
            model_name='hotel',
            index=models.Index(fields=['country'], name='main_hotel_country_1ea9aa_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='favorite',
            unique_together={('user', 'hotel')},
        ),
    ]
